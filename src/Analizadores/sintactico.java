
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Jul 13 16:08:22 COT 2013
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayList;
import arboles.nodo;

/** CUP v0.10k generated parser.
  * @version Sat Jul 13 16:08:22 COT 2013
  */
public class sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\027\000\002\002\004\000\002\011\002\000\002\003" +
    "\004\000\002\012\002\000\002\004\005\000\002\013\002" +
    "\000\002\006\006\000\002\014\002\000\002\006\006\000" +
    "\002\006\002\000\002\015\002\000\002\005\005\000\002" +
    "\016\002\000\002\007\006\000\002\017\002\000\002\007" +
    "\006\000\002\007\002\000\002\020\002\000\002\021\002" +
    "\000\002\022\002\000\002\010\010\000\002\023\002\000" +
    "\002\010\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\043\000\006\012\000\013\000\001\002\000\006\012" +
    "\ufffe\013\ufffe\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\006\012\ufff7\013\ufff7\001\002\000" +
    "\004\002\uffff\001\002\000\012\002\ufff8\004\ufffc\005\ufffa" +
    "\014\ufff8\001\002\000\006\012\uffec\013\ufff0\001\002\000" +
    "\004\012\034\001\002\000\016\002\ufff1\004\ufff1\005\ufff1" +
    "\006\ufff5\007\ufff3\014\ufff1\001\002\000\004\013\016\001" +
    "\002\000\006\012\uffef\013\uffef\001\002\000\006\012\ufffe" +
    "\013\ufffe\001\002\000\004\014\uffee\001\002\000\004\014" +
    "\022\001\002\000\016\002\uffed\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\014\uffed\001\002\000\004\007\031\001\002\000" +
    "\004\006\026\001\002\000\012\002\ufff6\004\ufff6\005\ufff6" +
    "\014\ufff6\001\002\000\006\012\uffec\013\ufff0\001\002\000" +
    "\016\002\ufff1\004\ufff1\005\ufff1\006\ufff5\007\ufff3\014\ufff1" +
    "\001\002\000\012\002\ufff4\004\ufff4\005\ufff4\014\ufff4\001" +
    "\002\000\006\012\uffec\013\ufff0\001\002\000\016\002\ufff1" +
    "\004\ufff1\005\ufff1\006\ufff5\007\ufff3\014\ufff1\001\002\000" +
    "\012\002\ufff2\004\ufff2\005\ufff2\014\ufff2\001\002\000\016" +
    "\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\014\uffeb\001" +
    "\002\000\004\005\043\001\002\000\004\004\040\001\002" +
    "\000\006\002\ufffd\014\ufffd\001\002\000\006\012\ufff7\013" +
    "\ufff7\001\002\000\012\002\ufff8\004\ufffc\005\ufffa\014\ufff8" +
    "\001\002\000\006\002\ufffb\014\ufffb\001\002\000\006\012" +
    "\ufff7\013\ufff7\001\002\000\012\002\ufff8\004\ufffc\005\ufffa" +
    "\014\ufff8\001\002\000\006\002\ufff9\014\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\043\000\006\003\004\011\003\001\001\000\006\004" +
    "\007\012\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\010\015\011\001\001\000\002\001\001\000" +
    "\010\006\036\013\035\014\034\001\001\000\010\010\013" +
    "\020\014\023\012\001\001\000\002\001\001\000\010\007" +
    "\024\016\023\017\022\001\001\000\002\001\001\000\004" +
    "\021\016\001\001\000\006\004\017\012\006\001\001\000" +
    "\004\022\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\026\020\014\023\012\001\001\000\010\007\027" +
    "\016\023\017\022\001\001\000\002\001\001\000\010\010" +
    "\031\020\014\023\012\001\001\000\010\007\032\016\023" +
    "\017\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\040\015\011\001\001\000\010\006\041\013\035\014" +
    "\034\001\001\000\002\001\001\000\006\005\043\015\011" +
    "\001\001\000\010\006\044\013\035\014\034\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/**Metodo al que se llama automaticamente ante algun error sintactico.*/
public void syntax_error(Symbol s){
    System.out.println("Error Sintactico -> lexema: " +s.value+" Linea: " +s.right+ " Columna: "+s.left);
}

/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error Sintactico No Recuperable-> Lexema: " +s.value+" Linea: "+s.right+ " Columna: "+s.left);
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintactico$actions {


//Lista
ArrayList<nodo> lista = new ArrayList(); 
//    

String Fichero_Sintactico = "Sintactico.txt";
String Fichero_Expresion = "expresion.txt";
File Sintactico = new File(Fichero_Sintactico);
File Expresion = new File(Fichero_Expresion);

//Variables a manejar
int contador=0;
int contador2=0;
int pos=0;
int eaux=0;
int tpaux=0;
int epaux=0;
int tactual=0;
int eactual=0;
int factual=0;
int tpactual=0;
int epactual=0;
arboles.nodo auxiliar;

//Para escribir archivo de arbol sintactico..
public void escribir(String mensaje){
			try{
			  BufferedWriter bw =  new BufferedWriter(new FileWriter(Sintactico, true));  
                          bw.write(mensaje);			  
			  bw.close();
			} catch (IOException ioe){
				ioe.printStackTrace();
}
}

public void escribir2(String mensaje){
			try{
			  BufferedWriter bw =  new BufferedWriter(new FileWriter(Expresion, true));
                          bw.write(mensaje);			  
			  bw.close();
			} catch (IOException ioe){
				ioe.printStackTrace();
}
}

public void Preparar(File Archivo){
    if(Archivo.exists()){
        Archivo.delete();
    }
}

//Creacion de metodos y funciones..
boolean Verificar(String posible){
if(lista.get(0).getValor().equals(posible)){
lista.remove(0);
return true;
}
return false;
}

arboles.nodo ObtenerNumero(){
String valor=lista.get(0).getValor();
    if(Verificar("(")){
    arboles.nodo x = ObtenerSuma();
    Verificar(")");
    return null;
    }
    else{
    try{
        double y = Double.parseDouble( valor );
        arboles.nodo aux = lista.remove(0);        
        return aux;
    }
    catch( NumberFormatException err ){
        return null;
    }
}
}

arboles.nodo ObtenerProducto(){
arboles.nodo a = ObtenerNumero();
auxiliar=lista.get(0);
if (Verificar("*")){
arboles.nodo b = ObtenerNumero();
escribir2("\"node"+ (a.getContador()) +"\" -- \"node"+ (auxiliar.getContador()) + "\";\n");
escribir2("\"node"+ (b.getContador()) +"\" -- \"node"+ (auxiliar.getContador()) + "\";\n");
System.out.println("Se imprime * de " + a.getValor() + " con " + b.getValor());
return null;
}
else{
    return a;
}
}

arboles.nodo ObtenerSuma(){
arboles.nodo a = ObtenerProducto();
if (Verificar("+")){
System.out.println("Se realiza suma");
arboles.nodo b = ObtenerSuma();
return null;
}
else{
    return a;
}
}



  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // F ::= NT$10 Numero 
            {
              Object RESULT = null;
              // propagate RESULT from NT$10
              if ( ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).value;
		 
         escribir("node"+contador+" [ label= " + v + "];\n"); 
         escribir("\"node"+ (contador-1) +"\" -- \"node"+ (contador) + "\";\n");  contador++; 
         ///////////////////////////BLOQUE DE EXPRESIONES////////////////////////////         
         escribir2("node"+contador2+" [ label= " + v + "];\n"); 
         arboles.nodo nuevo= new arboles.nodo(("" + v) ,contador2);         
         lista.add(nuevo);         
         contador2++;

              CUP$sintactico$result = new java_cup.runtime.Symbol(6/*F*/, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$10 ::= 
            {
              Object RESULT = null;
 
        ////////////////////////////BLOQUE DE SINTACTICO////////////////////////////
         escribir("node"+contador+" [ label= Numero];\n");
         escribir("\"node"+ factual +"\" -- \"node"+ (contador) + "\";\n"); contador++; 
              CUP$sintactico$result = new java_cup.runtime.Symbol(17/*NT$10*/, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // F ::= NT$7 PA NT$8 E NT$9 PC 
            {
              Object RESULT = null;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
              // propagate RESULT from NT$8
              if ( ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
              // propagate RESULT from NT$9
              if ( ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 arboles.nodo nuevo2= new arboles.nodo(")",contador2);
         lista.add(nuevo2);     contador2++;    
              CUP$sintactico$result = new java_cup.runtime.Symbol(6/*F*/, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$9 ::= 
            {
              Object RESULT = null;
 tpactual=tpaux; epactual=epaux;   eactual=eaux; 
              CUP$sintactico$result = new java_cup.runtime.Symbol(16/*NT$9*/, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$8 ::= 
            {
              Object RESULT = null;
 /*PARA USO OPTIMO IMPLEMENTAR UNA PILA.. */
         tpaux=tpactual; epaux=epactual;                   
         
              CUP$sintactico$result = new java_cup.runtime.Symbol(15/*NT$8*/, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$7 ::= 
            {
              Object RESULT = null;
 
         escribir("node"+contador+" [ label= \"(\"];\n");
         escribir("\"node"+ factual +"\" -- \"node"+ (contador) + "\";\n"); contador++;
         escribir("node"+contador+" [ label= E];\n");
         escribir("\"node"+ factual +"\" -- \"node"+ (contador) + "\";\n"); eactual=contador; contador++; 
         escribir("node"+contador+" [ label= \")\"];\n");
         escribir("\"node"+ factual +"\" -- \"node"+ (contador) + "\";\n");  contador++; 
         ///////////////////////////BLOQUE DE EXPRESIONES////////////////////////////         
         arboles.nodo nuevo= new arboles.nodo("(",contador2);
         lista.add(nuevo);    contador2++;     

              CUP$sintactico$result = new java_cup.runtime.Symbol(14/*NT$7*/, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TP ::= 
            {
              Object RESULT = null;
		 
         //Creacion de nodo         
         escribir("node"+contador+" [ label= Epsilon];\n");          
         escribir("\"node"+ tpactual + "\" -- \"node"+ contador + "\";\n"); contador++;  
              CUP$sintactico$result = new java_cup.runtime.Symbol(5/*TP*/, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TP ::= NT$6 DIV F TP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;

              CUP$sintactico$result = new java_cup.runtime.Symbol(5/*TP*/, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              Object RESULT = null;
 ////////////////////////////BLOQUE DE SINTACTICO//////////////////////////// 
         escribir("node"+contador+" [ label= \"/\"];\n");
         escribir("\"node"+ tpactual +"\" -- \"node"+ (contador) + "\";\n"); contador++;
         escribir("node"+contador+" [ label= F];\n");
         escribir("\"node"+ tpactual +"\" -- \"node"+ (contador) + "\";\n"); factual=contador; contador++; 
         escribir("node"+contador+" [ label= TP];\n");
         escribir("\"node"+ tpactual +"\" -- \"node"+ (contador) + "\";\n"); tpactual=contador; contador++;
         ///////////////////////////BLOQUE DE EXPRESIONES////////////////////////////
         escribir2("node"+contador2+" [ label= \"/\"];\n");
         arboles.nodo nuevo= new arboles.nodo("/",contador2);                 
         lista.add(nuevo);
         //escribir2("\"node"+ (contador2-1) +"\" -- \"node"+ (contador2) + "\";\n"); 
         contador2++;
         
              CUP$sintactico$result = new java_cup.runtime.Symbol(13/*NT$6*/, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TP ::= NT$5 MUL F TP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;

              CUP$sintactico$result = new java_cup.runtime.Symbol(5/*TP*/, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              Object RESULT = null;
 ////////////////////////////BLOQUE DE SINTACTICO//////////////////////////// 
         escribir("node"+contador+" [ label= \"*\"];\n");
         escribir("\"node"+ tpactual +"\" -- \"node"+ (contador) + "\";\n"); contador++;
         escribir("node"+contador+" [ label= F];\n");
         escribir("\"node"+ tpactual +"\" -- \"node"+ (contador) + "\";\n"); factual=contador; contador++; 
         escribir("node"+contador+" [ label= TP];\n");
         escribir("\"node"+ tpactual +"\" -- \"node"+ (contador) + "\";\n"); tpactual=contador; contador++; 
         ///////////////////////////BLOQUE DE EXPRESIONES////////////////////////////
         escribir2("node"+contador2+" [ label= \"*\"];\n");         
         arboles.nodo nuevo= new arboles.nodo("*",contador2);                 
         lista.add(nuevo);
         //escribir2("\"node"+ (contador2-1) +"\" -- \"node"+ (contador2) + "\";\n"); 
         contador2++;
         
              CUP$sintactico$result = new java_cup.runtime.Symbol(12/*NT$5*/, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // T ::= NT$4 F TP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;

              CUP$sintactico$result = new java_cup.runtime.Symbol(3/*T*/, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              Object RESULT = null;
 
        ////////////////////////////BLOQUE DE SINTACTICO//////////////////////////// 
         escribir("node"+contador+" [ label= F];\n");
         escribir("\"node"+ tactual +"\" -- \"node"+ (contador) + "\";\n"); factual=contador; contador++;
         escribir("node"+contador+" [ label= TP];\n");
         escribir("\"node"+ tactual +"\" -- \"node"+ (contador) + "\";\n"); tpactual=contador; contador++; 
              CUP$sintactico$result = new java_cup.runtime.Symbol(11/*NT$4*/, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EP ::= 
            {
              Object RESULT = null;
		 
         ////////////////////////////BLOQUE DE SINTACTICO//////////////////////////// 
         escribir("node"+contador+" [ label= Epsilon];\n");          
         escribir("\"node"+ epactual + "\" -- \"node"+ contador + "\";\n"); contador++;  
              CUP$sintactico$result = new java_cup.runtime.Symbol(4/*EP*/, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EP ::= NT$3 MIN T EP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;

              CUP$sintactico$result = new java_cup.runtime.Symbol(4/*EP*/, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$3 ::= 
            {
              Object RESULT = null;
 ////////////////////////////BLOQUE DE SINTACTICO//////////////////////////// 
         escribir("node"+contador+" [ label= \"-\"];\n"); 
         escribir("\"node"+ epactual +"\" -- \"node"+ (contador) + "\";\n"); contador++;
         escribir("node"+contador+" [ label= T];\n");
         escribir("\"node"+ epactual +"\" -- \"node"+ (contador) + "\";\n"); tactual=contador; contador++;
         escribir("node"+contador+" [ label= EP];\n");
         escribir("\"node"+ epactual +"\" -- \"node"+ (contador) + "\";\n"); epactual=contador; contador++; 
         ///////////////////////////BLOQUE DE EXPRESIONES////////////////////////////
         escribir2("node"+contador2+" [ label= \"-\"];\n"); 
         arboles.nodo nuevo= new arboles.nodo("-",contador2);                 
         lista.add(nuevo);
         //escribir2("\"node"+ (contador2-1) +"\" -- \"node"+ (contador2) + "\";\n"); 
         contador2++;
         
              CUP$sintactico$result = new java_cup.runtime.Symbol(10/*NT$3*/, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EP ::= NT$2 SUM T EP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;

              CUP$sintactico$result = new java_cup.runtime.Symbol(4/*EP*/, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT = null;
 
         ////////////////////////////BLOQUE DE SINTACTICO//////////////////////////// 
         escribir("node"+contador+" [ label= \"+\"];\n"); 
         escribir("\"node"+ epactual +"\" -- \"node"+ (contador) + "\";\n"); contador++;
         escribir("node"+ contador +" [ label= T];\n"); 
         escribir("\"node"+ epactual +"\" -- \"node"+ (contador) + "\";\n"); tactual=contador; contador++;
         escribir("node"+contador+" [ label= EP];\n");
         escribir("\"node"+ epactual +"\" -- \"node"+ (contador) + "\";\n"); epactual=contador; contador++; 
         ///////////////////////////BLOQUE DE EXPRESIONES////////////////////////////
         escribir2("node"+contador2+" [ label= \"+\"];\n"); 
         arboles.nodo nuevo= new arboles.nodo("+",contador2);               
         lista.add(nuevo);
         //escribir2("\"node"+ (contador2-1) +"\" -- \"node"+ (contador2) + "\";\n"); 
         contador2++;
         
              CUP$sintactico$result = new java_cup.runtime.Symbol(9/*NT$2*/, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E ::= NT$1 T EP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;

              CUP$sintactico$result = new java_cup.runtime.Symbol(2/*E*/, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT = null;
 ////////////////////////////BLOQUE DE SINTACTICO////////////////////////////                
        escribir("node"+contador+" [ label= T];\n"); tactual=contador;
        escribir("\"node"+ eactual +"\" -- \"node"+ contador + "\";\n"); contador++;
        escribir("node"+contador+" [ label= EP];\n"); epactual=contador; 
        escribir("\"node"+ eactual +"\" -- \"node"+ contador + "\";\n"); contador++;
        
              CUP$sintactico$result = new java_cup.runtime.Symbol(8/*NT$1*/, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= NT$0 E 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		    ////////////////////////////BLOQUE DE SINTACTICO////////////////////////////
        escribir("label=\"ARBOL SINTACTICO\"\n fontsize=25;");
        escribir("}");
        ///////////////////////////BLOQUE DE EXPRESIONES////////////////////////////
        try{
        ObtenerSuma();
        }
        catch(Exception ex){
        System.out.println("Error");
        }        
        escribir2("label=\"ARBOL DE EXPRESIONES\"\n fontsize=25;");                
        escribir2("}");                
     
              CUP$sintactico$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT = null;
 Preparar(Sintactico);  Preparar(Expresion);
        ////////////////////////////BLOQUE DE SINTACTICO////////////////////////////
        escribir("graph G {\n node [shape = circle fixedsize=true, width=0.9];\n"); 
        //escribir("size=\"8,5\"");
        escribir("node" + contador +" [ label = S];\n"); contador++;
        escribir("node"+contador+" [ label= E];\n");  eactual=contador; eaux=contador;
        escribir("\"node"+ 0 +"\" -- \"node"+ eactual + "\";\n");
        contador++; 
        ///////////////////////////BLOQUE DE EXPRESIONES////////////////////////////
        escribir2("graph G {\n node [shape = circle fixedsize=true, width=0.9];\n");                 
        
              CUP$sintactico$result = new java_cup.runtime.Symbol(7/*NT$0*/, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

